name: Build and Compress

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build on ${{ matrix.os }} for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: void
            asset_name: void-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            binary_name: void
            asset_name: void-linux-arm64
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            binary_name: void
            asset_name: void-linux-armv7
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: void
            asset_name: void-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: void
            asset_name: void-macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation tools for ARM (Linux)
      if: contains(matrix.target, 'arm') && matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

    - name: Configure Tokio Unstable Features
      shell: bash
      run: |
        mkdir -p .cargo
        echo '[build]' > .cargo/config.toml
        echo 'rustflags = ["--cfg", "tokio_unstable"]' >> .cargo/config.toml

    - name: Cache Cargo dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build for ARM Linux
      if: contains(matrix.target, 'arm') && matrix.os == 'ubuntu-latest'
      run: |
        cargo install cross --git https://github.com/cross-rs/cross
        cross build --release --target ${{ matrix.target }}

    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Build for Linux
      if : matrix.os == 'ubuntu-latest'
      run: |
        cargo build --release --target ${{ matrix.target }}

    - name: Install UPX (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install -y upx

    - name: Install UPX (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install upx

    - name: Compress Binary
      run: |
        if [[ "${{ contains(matrix.target, 'arm') && matrix.os == 'ubuntu-latest' }}" == "true" ]]; then
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ./${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ./${{ matrix.asset_name }}
        fi
        upx -9 ./${{ matrix.asset_name }}
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ./${{ matrix.asset_name }}
        retention-days: 7

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            void-linux-amd64/void-linux-amd64
            void-linux-arm64/void-linux-arm64
            void-linux-armv7/void-linux-armv7
            void-macos-amd64/void-macos-amd64
            void-macos-arm64/void-macos-arm64
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
